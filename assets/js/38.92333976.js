(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{496:function(s,e,n){"use strict";n.r(e);var r=n(13),t=Object(r.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"реалізація-інформаціиного-та-програмного-забезпечення"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#реалізація-інформаціиного-та-програмного-забезпечення"}},[s._v("#")]),s._v(" Реалізація інформаційного та програмного забезпечення")]),s._v(" "),e("p",[s._v("В рамках проекту розробляється:")]),s._v(" "),e("ul",[e("li",[s._v("SQL-скрипт для створення на початкового наповнення бази даних")]),s._v(" "),e("li",[s._v("RESTfull сервіс для управління даними")])]),s._v(" "),e("h2",{attrs:{id:"sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-скрипт-для-створення-на-початкового-наповнення-бази-даних"}},[s._v("#")]),s._v(" SQL-скрипт для створення на початкового наповнення бази даних")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\nSET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\nSET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n\nDROP SCHEMA IF EXISTS `mydb` ;\n\nCREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;\nUSE `mydb` ;\n\nDROP TABLE IF EXISTS `mydb`.`users` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`users` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(45) NOT NULL,\n  `email` VARCHAR(45) NOT NULL,\n  `password` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\nDROP TABLE IF EXISTS `mydb`.`experts` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`experts` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `username` VARCHAR(45) NOT NULL,\n  `email` VARCHAR(45) NOT NULL,\n  `password` VARCHAR(45) NOT NULL,\n  `job` VARCHAR(45) NOT NULL,\n  `users_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_experts_users_idx` (`users_id` ASC) VISIBLE,\n  CONSTRAINT `fk_experts_users`\n    FOREIGN KEY (`users_id`)\n    REFERENCES `mydb`.`users` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\nDROP TABLE IF EXISTS `mydb`.`quizes` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`quizes` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `text` VARCHAR(45) NULL,\n  `expiration_date` DATETIME NOT NULL,\n  `users_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_quiz_users1_idx` (`users_id` ASC) VISIBLE,\n  CONSTRAINT `fk_quiz_users1`\n    FOREIGN KEY (`users_id`)\n    REFERENCES `mydb`.`users` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`questions` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`questions` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `text` VARCHAR(45) NOT NULL,\n  `type` INT NOT NULL,\n  `quiz_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_questions_quiz1_idx` (`quiz_id` ASC) VISIBLE,\n  CONSTRAINT `fk_questions_quiz1`\n    FOREIGN KEY (`quiz_id`)\n    REFERENCES `mydb`.`quizes` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`options` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`options` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `text` VARCHAR(45) NOT NULL,\n  `questions_id` INT NOT NULL,\n  `isCorrect` TINYINT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_answers_questions1_idx` (`questions_id` ASC) VISIBLE,\n  CONSTRAINT `fk_answers_questions1`\n    FOREIGN KEY (`questions_id`)\n    REFERENCES `mydb`.`questions` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.` options` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.` options` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `text` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`selected_options` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`selected_options` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  ` options_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_selected_options_ options1_idx` (` options_id` ASC) VISIBLE,\n  CONSTRAINT `fk_selected_options_ options1`\n    FOREIGN KEY (` options_id`)\n    REFERENCES `mydb`.` options` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`users_has_quiz` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`users_has_quiz` (\n  `users_id` INT NOT NULL,\n  `quiz_id` INT NOT NULL,\n  PRIMARY KEY (`users_id`, `quiz_id`),\n  INDEX `fk_users_has_quiz_quiz1_idx` (`quiz_id` ASC) VISIBLE,\n  INDEX `fk_users_has_quiz_users1_idx` (`users_id` ASC) VISIBLE,\n  CONSTRAINT `fk_users_has_quiz_users1`\n    FOREIGN KEY (`users_id`)\n    REFERENCES `mydb`.`users` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_users_has_quiz_quiz1`\n    FOREIGN KEY (`quiz_id`)\n    REFERENCES `mydb`.`quizes` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`users_has_quiz1` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`users_has_quiz1` (\n  `users_id` INT NOT NULL,\n  `quiz_id` INT NOT NULL,\n  PRIMARY KEY (`users_id`, `quiz_id`),\n  INDEX `fk_users_has_quiz1_quiz1_idx` (`quiz_id` ASC) VISIBLE,\n  INDEX `fk_users_has_quiz1_users1_idx` (`users_id` ASC) VISIBLE,\n  CONSTRAINT `fk_users_has_quiz1_users1`\n    FOREIGN KEY (`users_id`)\n    REFERENCES `mydb`.`users` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_users_has_quiz1_quiz1`\n    FOREIGN KEY (`quiz_id`)\n    REFERENCES `mydb`.`quizes` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`quiz_states` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`quiz_states` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `state_name` VARCHAR(45) NOT NULL,\n  PRIMARY KEY (`id`))\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`quiz_actions` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`quiz_actions` (\n  `id` INT NOT NULL AUTO_INCREMENT,\n  `at` DATETIME NOT NULL,\n  `quizes_id` INT NOT NULL,\n  `quiz_states_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_quiz_states_quizes1_idx` (`quizes_id` ASC) VISIBLE,\n  INDEX `fk_quiz_actions_quiz_states1_idx` (`quiz_states_id` ASC) VISIBLE,\n  CONSTRAINT `fk_quiz_states_quizes1`\n    FOREIGN KEY (`quizes_id`)\n    REFERENCES `mydb`.`quizes` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_quiz_actions_quiz_states1`\n    FOREIGN KEY (`quiz_states_id`)\n    REFERENCES `mydb`.`quiz_states` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`results` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`results` (\n  `id` INT NOT NULL,\n  `options_id` INT NOT NULL,\n  `experts_id` INT NOT NULL,\n  PRIMARY KEY (`id`),\n  INDEX `fk_results_answers1_idx` (`options_id` ASC) VISIBLE,\n  INDEX `fk_results_experts1_idx` (`experts_id` ASC) VISIBLE,\n  CONSTRAINT `fk_results_answers1`\n    FOREIGN KEY (`options_id`)\n    REFERENCES `mydb`.`options` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_results_experts1`\n    FOREIGN KEY (`experts_id`)\n    REFERENCES `mydb`.`experts` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`experts_has_results` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`experts_has_results` (\n  `experts_id` INT NOT NULL,\n  `results_id` INT NOT NULL,\n  PRIMARY KEY (`experts_id`, `results_id`),\n  INDEX `fk_experts_has_results_results1_idx` (`results_id` ASC) VISIBLE,\n  INDEX `fk_experts_has_results_experts1_idx` (`experts_id` ASC) VISIBLE,\n  CONSTRAINT `fk_experts_has_results_experts1`\n    FOREIGN KEY (`experts_id`)\n    REFERENCES `mydb`.`experts` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_experts_has_results_results1`\n    FOREIGN KEY (`results_id`)\n    REFERENCES `mydb`.`results` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`results_has_experts` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`results_has_experts` (\n  `results_id` INT NOT NULL,\n  `experts_id` INT NOT NULL,\n  PRIMARY KEY (`results_id`, `experts_id`),\n  INDEX `fk_results_has_experts_experts1_idx` (`experts_id` ASC) VISIBLE,\n  INDEX `fk_results_has_experts_results1_idx` (`results_id` ASC) VISIBLE,\n  CONSTRAINT `fk_results_has_experts_results1`\n    FOREIGN KEY (`results_id`)\n    REFERENCES `mydb`.`results` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_results_has_experts_experts1`\n    FOREIGN KEY (`experts_id`)\n    REFERENCES `mydb`.`experts` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nDROP TABLE IF EXISTS `mydb`.`experts_has_results1` ;\n\nCREATE TABLE IF NOT EXISTS `mydb`.`experts_has_results1` (\n  `experts_id` INT NOT NULL,\n  `results_id` INT NOT NULL,\n  PRIMARY KEY (`experts_id`, `results_id`),\n  INDEX `fk_experts_has_results1_results1_idx` (`results_id` ASC) VISIBLE,\n  INDEX `fk_experts_has_results1_experts1_idx` (`experts_id` ASC) VISIBLE,\n  CONSTRAINT `fk_experts_has_results1_experts1`\n    FOREIGN KEY (`experts_id`)\n    REFERENCES `mydb`.`experts` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION,\n  CONSTRAINT `fk_experts_has_results1_results1`\n    FOREIGN KEY (`results_id`)\n    REFERENCES `mydb`.`results` (`id`)\n    ON DELETE NO ACTION\n    ON UPDATE NO ACTION)\nENGINE = InnoDB;\n\n\nSET SQL_MODE=@OLD_SQL_MODE;\nSET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\nSET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n")])])]),e("h2",{attrs:{id:"restfull-сервіс-для-управління-даними"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restfull-сервіс-для-управління-даними"}},[s._v("#")]),s._v(" RESTfull сервіс для управління даними")]),s._v(" "),e("h3",{attrs:{id:"index-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#index-js"}},[s._v("#")]),s._v(" Index.js")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("'use strict';\n\nconst express = require('express');\nconst { Pool } = require('./db/pool.js');\nconst { getQuestion, getAllQuestions, postQuestion, deletedQuestion, updateQuestion, getUser, getAllUsers, postUser, deletedUser, updateUser } = require('./controller/controllers.js')\n\nconst app = express();\nconst jsonParse = express.json();\n\napp.get('/user/:id', getUser);\napp.get('/users/', getAllUsers);\napp.post('/user/', jsonParse, postUser);\napp.put('/user/:id', jsonParse, updateUser);\napp.delete('/user/:id', deletedUser);\n\napp.get('/question/:id', getQuestion);\napp.get('/questions/', getAllQuestions);\napp.post('/question/', jsonParse, postQuestion);\napp.put('/question/:id', jsonParse, updateQuestion);\napp.delete('/question/:id', deletedQuestion);\n\napp.listen(8080, () => {\n    console.log('Server is running on http://localhost:8080');\n});\n")])])]),e("h3",{attrs:{id:"pool-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pool-js"}},[s._v("#")]),s._v(" Pool.js")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\'use strict\';\n\nconst mysql = require(\'mysql2\');\n\nconst Pool = mysql.createConnection({\n    host: "localhost",\n    user: "root",\n    password: "password",\n    database: "mydb"\n});\n\nmodule.exports = { Pool };\n')])])]),e("h3",{attrs:{id:"controllers-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controllers-js"}},[s._v("#")]),s._v(" Controllers.js")]),s._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("'use strict';\n\nconst { Pool } = require('../db/pool.js');\n\nconst getMaxQuestionId = () => {\n    const sql = 'SELECT MAX(id) FROM mydb.questions';\n    return new Promise((resolve, reject) => {\n        Pool.query(sql, (error, result, fields) => {\n            if (error) {\n                console.error('Error fetching max question ID:', error);\n                return reject(error);\n            }\n            return resolve(result);\n        });\n    });\n};\n\nconst getQuestion = (req, res) => {\n    const sql = `SELECT * FROM mydb.questions WHERE id = ${req.params.id}`;\n    Pool.query(sql, (error, result, fields) => {\n        if (error) {\n            console.error('Error fetching question:', error);\n            return res.status(500).json(error);\n        }\n        if (result.length) {\n            res.send(result);\n        } else {\n            res.sendStatus(404);\n        }\n    });\n};\n\nconst getAllQuestions = (req, res) => {\n    const sql = 'SELECT * from mydb.questions';\n    Pool.query(sql, (error, result, fields) => {\n        if (error) {\n            console.error('Error fetching all questions:', error);\n            return res.status(500).json(error);\n        }\n        res.send(result);\n    });\n};\n\nconst postQuestion = (req, res) => {\n    if (!req.body) return res.sendStatus(400);\n    getMaxQuestionId().then(data => {\n        let maxId = data[0]['MAX(id)'];\n        const sql = `INSERT INTO mydb.questions (id, type, text, quiz_id) VALUES (${++maxId},\\\"${req.body.type}\\\", \\\"${req.body.text}\\\", ${req.body.quiz_id})`;\n        Pool.query(sql, (error, result, fields) => {\n            if (error) return res.status(500).json(error);\n            result ? res.send(result) : res.sendStatus(404);\n        });\n    });\n};\n\nconst deletedQuestion = (req, res) => {\n    const sql = `DELETE FROM mydb.questions WHERE id = ${req.params.id}`;\n    Pool.query(sql, (error, result, fields) => {\n        if (error) {\n            console.error('Error deleting question:', error);\n            return res.status(500).json(error);\n        }\n        if (result.affectedRows) {\n            res.send(result);\n        } else {\n            res.sendStatus(404);\n        }\n    });\n};\n\nconst updateQuestion = (req, res) => {\n    if (!req.body) return res.sendStatus(400);\n    const sql = `UPDATE mydb.questions SET text = \\\"${req.body.text}\\\", type = \\\"${req.body.type}\\\", quiz_id = ${req.body.quiz_id} WHERE id = ${req.params.id}`;\n    Pool.query(sql, (err, result, fields) => {\n        if (err) {\n            console.error('Error updating question:', err);\n            return res.status(500).json(err);\n        }\n        if (result.affectedRows) {\n            res.send(result);\n        } else {\n            res.sendStatus(404);\n        }\n    });\n};\n\nconst getMaxUserId = () => {\n    const sql = 'SELECT MAX(id) FROM mydb.users';\n    return new Promise((resolve, reject) => {\n        Pool.query(sql, (error, result, fields) => {\n            if (error) {\n                console.error('Error fetching max user ID:', error);\n                return reject(error);\n            }\n            return resolve(result);\n        });\n    });\n};\n\nconst getUser = (req, res) => {\n    const sql = `SELECT * FROM mydb.users WHERE id = ${req.params.id}`;\n    Pool.query(sql, (error, result, fields) => {\n        if (error) {\n            console.error('Error fetching user:', error);\n            return res.status(500).json(error);\n        }\n        if (result.length) {\n            res.send(result);\n        } else {\n            res.sendStatus(404);\n        }\n    });\n};\n\nconst getAllUsers = (req, res) => {\n    const sql = 'SELECT * from mydb.users';\n    Pool.query(sql, (error, result, fields) => {\n        if (error) {\n            console.error('Error fetching all users:', error);\n            return res.status(500).json(error);\n        }\n        res.send(result);\n    });\n};\n\nconst postUser = (req, res) => {\n    if (!req.body) return res.sendStatus(400);\n    getMaxUserId().then(data => {\n        let maxId = data[0]['MAX(id)'];\n        const sql = `INSERT INTO mydb.users (id, username, email, password) VALUES (${++maxId},\\\"${req.body.username}\\\", \\\"${req.body.email}\\\", \\\"${req.body.password}\\\")`;\n        Pool.query(sql, (error, result, fields) => {\n            if (error) return res.status(500).json(error);\n            result ? res.send(result) : res.sendStatus(404);\n        });\n    });\n};\n\nconst deletedUser = (req, res) => {\n    const sql = `DELETE FROM mydb.users WHERE id = ${req.params.id}`;\n    Pool.query(sql, (error, result, fields) => {\n        if (error) {\n            console.error('Error deleting user:', error);\n            return res.status(500).json(error);\n        }\n        if (result.affectedRows) {\n            res.send(result);\n        } else {\n            res.sendStatus(404);\n        }\n    });\n};\n\nconst updateUser = (req, res) => {\n    if (!req.body) return res.sendStatus(400);\n    const sql = `UPDATE mydb.users SET username = \\\"${req.body.username}\\\", email = \\\"${req.body.email}\\\", password = \\\"${req.body.password}\\\" WHERE id = ${req.params.id}`;\n    Pool.query(sql, (err, result, fields) => {\n        if (err) {\n            console.error('Error updating user:', err);\n            return res.status(500).json(err);\n        }\n        if (result.affectedRows) {\n            res.send(result);\n        } else {\n            res.sendStatus(404);\n        }\n    });\n};\n\nmodule.exports = { getQuestion: getQuestion, getAllQuestions: getAllQuestions, postQuestion: postQuestion, deletedQuestion: deletedQuestion, updateQuestion: updateQuestion, getUser: getUser, getAllUsers: getAllUsers, postUser: postUser, deletedUser: deletedUser, updateUser: updateUser };\n")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);